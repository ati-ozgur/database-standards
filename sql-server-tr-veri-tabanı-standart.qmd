# Karkas SQL Server Veri tabanı Standartları

## Kurulum Notları Collation

Veritabanı kurulurken, SQL Server içinden Collation olarak aşağıdakilerden biri seçilmelidir.

- Turkish_CI_AS : Turkish, case-insensitive, accent-sensitive, kana type-insensitive, width-insensitive
- Turkish_100_CI_AS_SC_UTF8: Turkish-100, case-insensitive, accent-sensitive, kana type-insensitive, width-insensitive, supplementary characters, UTF8 (SQL Server 2019)

Buradaki kelimelerin anlamı aşağıdaki gibidir.

- CI: Case Insensitive (Büyük küçük harf ayrımı yok)
- CS: Case sensitive (Büyük küçük harf ayrımı var)
- AS: Accent-sensitive (ı ve i aynı değildir)

Nchar unicode olarak değerleri tuttuğu için 2 katı yer kaplamakta  ve daha yavaş çalışmaktadır.
Eğer veritabanında aynı anda iki dil bilgisi tutulmayacaksa, yani hem rusça hem de türkçe bilgi, yazı değerleri veri tabanında varchar yada char olarak tutulmalıdır.
SQL Server 2019 ve sonrasını kullanıyorsanız, UTF8 seçmeniz tavsiye edilir.

## Şema (Schema) Kavramı

SQL Server şema (schema) kavramını en iyi şekilde uygulayan veri tabanları arasındadır.
Bu yüzden schema yapısının SQL server veri tabanı tasarımı yapılırken kullanılması tavsiye edilir.
Bu yapıda her ana modül için, "bir ana şema" + "bir tanım tablosu şema"'sı açılması tavsiye edilmektedir.
Bilgi tutarlılığı (Referential Integrity) korunması açısından bütün uygulama tek bir veritabanında çalışmalıdır.

Örneğin ihtiyaç duyduğunuz modüllerin Insan Kaynakları, Muhasebe ve Bordro olduğunu düşünelim.
Bu yapıda aşağıdaki şemaların açılması uygun olacaktır.

- ORTAK
- TT_ORTAK
- MUHASEBE
- TT_MUHASEBE
- INSAN_KAYNAKLARI
- TT_INSAN_KAYNAKLARI
- BORDRO
- TT_BORDRO
- OZLUK_BILGILERI
- TT_OZLUK_BILGILERI
- FIRMALAR
- TT_FIRMALAR

Burada muhasebe, insan kaynakları ve bordro şemaları zaten ihtiyaç duyulan şemalardır.
Bunlara ek olarak kişi bilgilerinin tutulması için ad, soyad, kimlik bilgileri etc ORTAK şeması önerilmektedir.
TT_ORTAK şeması buradaki bilgiler için gerekli tanım tablolarını tutacaktır.
Örneğin TT_ORTAK.CINSIYET ismindeki bir tanım tablosu cinsiyet bilgileri tutabilir.
Burada Kişi için tutulacak bilgiler herkes için kesin tutulması gereken bilgilerdir.
Örneğin ad soyad, tc kimlik no, resim gibi.
Ama eger sadece yazılımı kullanan kurumdaki, kişilere ait  (örneğin kurum sicil no, kurum eposta, kurum telefon) gibi bilgiler var ise bunların farklı şemada tutulması daha yararlı olacaktır.

Buraya FIRMALAR şeması muhasebe firmalarının fatura kesecekleri firma bilgileri için eklenmiştir.
Firma, Kişi bilgileri bir çok modül tarafından ihtiyaç duyulan bilgiler oldukları için bunların ayrı şemalarda tutulmaları daha yararlı olacaktır.

Son olarak Özlük bilgileri, Bordro ve insan kaynaklarının ihtiyaç duydukları ortak bilgileri taşıyacaktır.
Burada bu bilgiler sadece insan kaynakları şeması yada bordro şeması yerine ikisinin ortak kullandığı bir şemada olması daha uygundur.
Yani diğer bir deyişle; eğer bir tablo birden fazla modül tarafından kullanılıyor ise, bu ortaklığı belirtecek yeni bir şema gerekirse açılmalıdır.
Bu şema ismi eğer dışarıdan veri alınıyorsa bunu anlatan bir isim, eğer 2 modülün ortak noktası ise, bu ortak nokta olabilir.
Sadece 2 modül tarafından kullanılacak bir tablo ORTAK şemasını eklenmemelidir.

Ana modül şemalarından 10 taneden fazla tablo bulunması bu modülün büyük bir modül olduğunu göstermektedir.
Bu modül 2-3 ana modül olarak ayrılabilir.
Örneğin personel için aşağıdaki gibi bir ayrım olabilir.

- PERSONEL
- PERSONEL_IZIN
- PERSONEL_HARCAMALAR

Ayrıca geçici daha sonra silinebilecek tabloların tutulması için GECICI veya TEMP isminde bir şemada eklenmesi uygun olacaktır.
Aynı şekilde kısa süreli yedek işlemleri için, karışık bir güncelleme öncesinde ihtiyaç duyulabilecek yedek işlemleri için YEDEK şeması eklenebilir.

Her modül ilişkileri (relations) gösteren diyagramlara sahip olmalıdır.

TODO: Örnek diagram ekle

## Şema, Tablo, Kolon İsimlendirme

Şema ismi olarak kullandığınız isimleri tablo isimleri olarak kullanmayın.
Yani eğer BORDRO diye bir şemanız varsa, bu şema içinde veya diğer şemaların içinde BORDRO diye bir tablonuz olmamalıdır.

VS.NET içinde proje ismi olarak kullanacağınız bir ismi şema ismi  olarak kullanmayınız.
Yada şema isimlerinizi, VS.NET içinde proje ismi olarak vermeyin.
C# Derleyici (C# Compiler)  bu durumda sorun çıkarmaktadır.

Veritabanında oluşturulan Tablo ve Şema isimleri tüm harfler büyük, Kelimeler arasında ise _ olacak şekilde seçilmelidir.

- INSAN_KAYNAKLARI.ILAC_ALIMI_ALINAN_ILACLAR
- ORTAK.KISI_EK_BILGILER
- MUHASEBE.FIS
- MUHASEBE.FIS_DETAY

### Kolon İsimlendirme

Kolon isimleri verilirken .NET isimlendirme konvansiyonuna uygun olarak her kelime bü harf ile başlamalı, diğer harfler küçük harf olmalıdır.
Kolon isimleri kullanılırken türkçe karakterler (İ,Ü,ı ..) kullanılmamalıdır.
Bakınız aşağıdaki örnekler.

- Ad
- Soyad
- IkinciAdi
- TcKimlikNo
- SehirNo

Raporlama açısından bütün tabloların ve anlamı açık olmayan kolanların tanımlarının (description) yazılması tavsiye edilir.
Ama tanım yazılması iyi isim verilmesinden daha önemsizdir.
Tablo ve kolon isimlerinin iyi seçilmesi son derece önemlidir.
Bu sayede veritabanından otomatik rapor çıkaran araçların raporları daha anlamlı olacaktır.

### Kolon İsimlendirme - Primary Key

Primary key - Birincil anahtar isimlerinin nasıl olması gerektiğine proje başında karar verilmeli ve bu isimlendirmeye proje boyunca uyulmalıdır.
Buna göre birincil anahtar için aşağıdaki kelimelerden biri seçilmelidir.

- Key
- ID
- Id

Bazı projelerde KayitNo kullanılmaktadır.
Bu kelime uzun olduğu için bana göre yukarıdakiler daha iyi seçimlerdir.

Key anahtar, Id Identity (kimlik) kelimelerinin kısaltmasıdır.
Projede bunlardan sadece birinin kullanılması daha uygun olacaktır.
Aynı şekilde ID ve Id olarak karar verilmeli ve hep aynı şekilde kullanılmalıdır.

Aşağıdaki örneklerde Key kelimesi seçilmiştir.

Birincil Anahtarları TABLO ADI + Key olarak verilmesi tavsiye edilmektedir.
Örneğin:

| Tablo Adı           | Birinci Anahtar (Primary Key) Adı |
|---------------------|-----------------------------------|
| ORTAK.KISI           | KisiKey                           |
| MUHASEBE.FIS         | FisKey|
| BORDRO.ILAC_ALIMI_ALINAN_ILACLAR | IlacAlimiAlinanIlaclarKey |
| ORTAK.KISI_EK_BILGILER | KisiEkBilgilerKey |


Eğer tanım tablolarının primary key'ı seçiliyor ise TabloIsmi + (No, Turu, TurNo, Tipi, TipNo) gibi kolon isminden sonra türkçe okunmaya uygun bir ek kullanılmalıdır. Örneğin:


| Tablo Adı           | Birinci Anahtar (Primary Key) Adı |
|---------------------|-----------------------------------|
| TT_ORTAK.CINSIYET   | CinsiyetTipNo                           |
| TT_ORTAK.SEHIR        | SehirNo|
| TT_OZGECMIS.EGITIM_TIP | EgitimTipNo |
| TT_OZGECMIS.YABANCI_DIL_SINAV_TUR | YabanciDilSinavTurNo |

### Kolon İsimlendirme - Foreign Key

Kolonlarda ikincil anahtar isimleri verilirken dikkat edilmesi gereken kural,
referans edilen tablonun bir tanım tablosu mu yoksa bir ana tablomu olduğu kuralıdır.

- Eğer bir ana tabloya referans veriliyorsa TabloIsmi + Key kullanılmalıdır.
- Eğer bir tanım tablosuna referans veriliyorsa TabloIsmi + (No, Turu, TurNo, Tipi, TipNo) gibi kolon isminden sonra türkçe okunmaya uygun bir ek kullanılmalıdır.

Bu sayede bir tablo incelenirken hangi tablolara referans verdiği daha rahat bir
sekilde anlaşılacaktır.
Ayrıca verilen referansın bir tanım tablosuna yoksa bir ana tabloya verildiği
daha iyi anlaşılacaktır.

Not eğer verilen ikincil anahtar kolonu bir iş gereği yüzünden ise, kolon isminde bu durumun belirtilmesi ve aynı zamanda tablo isminin kullanılması daha iyi olur.

Örneğin Bilgi Edinme için tasarlanan tablo isimlerine bir bakalım.


```{mermaid}
erDiagram
    DILEKCE {
        uniqueidentifier DilekceKey
        string GonderenIP
        string DilekceIcerik
        int CevapIstekTurNo
        int GelisYoluTurNo
        uniqueidentifier VatandasBasvuruReferansKey
    }
```

Bu tabloyu okuduğumuzda 

- DilekceKey primary key, 
- BasvuruSahibiKisiKey ana tablolara referans eden foreign key
-  VatandasBasvuruReferansKey ana tablolara referans eden foreign key,
-  CevapIstekTurNo tanım tablolarına referans eden bilgiler. 
-  GelisYoluTurNo tanım tablolarına referans eden bilgiler.

Burada BasvuruSahibiKisiKey ORTAK.KISI tablosuna büyük ihtimal ile referans vermektedir.
KisiKey yerine BasvuruSahibiKisiKey kullanılması bu anahtarı dilekce basvuranı ifade ettiğini göstermektedir. 
Bu anahtar kullanılarak kisi adı soyadı gibi bilgilere ulaşılabilir.

CevapIstekTurNo ve GelisYoluTurNo kolonları ile TT_BILGI_EDINME şemasında veya başka bir TT şemasında CEVAP_ISTEK ve GELIS_YOLU isminde tablolar olduğunu biliyoruz.

## Kolon Veri Yapıları

### Primary Key

Birincil anahtar (Primary Key) konulmayan tablo olmayacaktır.
Primary key değerleri olarak uniqueidentifier veya Identity seçilmeli proje boyunca benzer bir yapı kullanılmalıdır.
Primary key Sentetik Anahtar (Surrogate Key) olarak int IDENTITY değerleri yerine uniqueidentifier tercih edilmesi, kod yazılması kolaylığı açısından değerlendirilmeli ve proje başlangıcında karar verilmelidir.
Uniqueidentifier eğer PK olarak kullanılıyorsa default değer olarak newid() olmalıdır.

### Foreign Key

Eğer bir tablo içindeki kolon başka bir tabloya referans veriyorsa kesinlikle yabancı anahtar (foreign key) tanımlanmalıdır.
Bu yabancı anahtar kolonun ismi TabloIsmiTurNo yada TabloIsmiKey olarak tanımlanmalıdır.
Tanım tabloları için TurNo kullanılmalıdır.
Normal modül tabloları için Key kullanılmalıdır.
TurNo yerine referans verilen tanımın türkçesine göre TipNo gibi diğer kelimelerde kullanılabilir.
Eğer bir kolon ismi TurNo, TipNo, Turu, Tipi, RenkNo, BilgiNo gibi bir kelime ile bitiyorsa ise Tanım Tablolarına referans veriliyordur.
TurNo(...) okunduğu zaman bir tanım tablosuna referans düşünülürken, Key ise 1..* veya 1..1 ilişkisini ana modül tablolarına tanımlamalıdır.

### Yazı Değerler (varchar...)

Yazı değerleri eğer değişken ise varchar ile, eğer sabit bir değer ise char olarak tutulmalıdır. 
Örneğin:

- Eğer bilgi girilen tip daima aynı sayıda ise örnek: Posta Kodu gibi char olarak tanımlanmalıdır.
- Eğer bilgi girilen değer değişken bir değer ise, ad soyad gibi varchar olarak tanımlanmalıdır.

Eğer veri tabanında kullanılan genel dilden (türkçe olmayan) farklı değer girilebilir ise nchar,nvarchar tanımlanmalıdır.

### Sayı Değerler

Sayı değerleri için alabilecekleri aralıkları düşünerek tiny int, short int , int veya big int kullanınız. 

-   Tablodaki değer  -32,768 - 32,767   smallint veri yapısını kullanın.
-   eğer tamsayı değer  -2,147,483,648 - 2,147,483,647 arası ise int veri yapısını kullanın.

### Para ve Ondalık Değerler

-  Money SQL standartında yoktur. Kullanılmamalıdır. 
-  Float ve double tam değerler değildir, yaklaşık değer olarak çalışırlar. 
Para hesaplarında kesinlikle kullanılmamaları gerekir.

- numeric ve  decimal aynı veri tipidir.
Bir birlerinin diğer ismi (alias) olarak tanımlıdırlar. 

- Eğer para değerlerinde daha fazla küsürata ihtiyaç var ise  numeric(18,4)-decimal(18,4) gibi artırılabilir. 

### Tarih Değerleri

Tarih değerleri 	

|Tarih Veri tipi |doğruluk (accuracy)|  Başlangıç Tarihi | Bitiş Tarihi  |
|---|---|---|---|
|datetime|3.33 milliseconds accuracy   | Jan 1, 1753  | Dec 31, 9999  |
|smalldatetime| 1 minute accuracy  | Jan 1, 1900  | Jun 6, 2079  |

TODO: daha sonra türkçe yap

değerleri arasını göstermektedir. 

.NET üstünde doğru kabul edilen,  örn: 01.01.1600 gibi bir değer SQL Server üzerinde hata verebilir.
Tarih değerlerinin bu aralıkta olduğuna emin olunuz.

- Tarih bilgilerini tutarken smalldatetime tercih ediniz. 			
- Eğer sadece yıl bilgisi tutacaksanız, Mezuniyet yılı smallint tutabilirsiniz. 

```sql
 CHECK  (([GirisSene]>=(1900) AND   [GirisSene]<=datepart(year,getdate()))) 
```
Yukarıdakı kısıtlama giris senesinin 1900 ile şu an bulunduğumuz sene arasında kalmasını sağlamaktadır.


### Resim Dosya gibi Binary Değerler
Resim veya binary data tutmak için varbinary(max) tercih edin. 
Veri tipi image SQL Server'ın yeni versiyonlarında kullanılmayacaktır.
 
### Diger Notlar


-   Tablolarda mümkün olduğunca girilen bilgiler not null yapılmalıdır.
-   Eğer anlamlı bir default/varsayılan değer verilebiliyorsa verilmelidir. 
- Örneğin GuncellemeTarih default now() verilebilir.


  
\section{Yazılım Geliştirme Yetkileri}  									 
Yazılım geliştiriciler için sınırlı yetkili veri tabanı kullanıcılar açılması 
ve SQL Sever Management Studio üzerinde işlem yapılırken bu 
kullanıcılar ile sisteme girilmesi.düşünülmelidir.
En doğrusu yazılım geliştirici kullanıcılarının bir role atanması ve bu rolün kısıtlanması olabilir.

  	 
\section{Stored Procedures - Functions}  									 
Yazılım geliştiriciler Stored Procedure yazma gereksinimi duyarlarsa 
bunu veritabanı yöneticisi ve takım liderlerinin onayını	aldıktan sonra   yapabileceklerdir.
Veri tabanında mümkün olduğunca stored procedure ve trigger olmamalı,
bunların yerine .NET kodları ile çözüm bulunmaya çalışılmalıdır.


Stored Procudures usp_ ile, functionlar ufn_ ile, triggerler ise utnX_ ile başlamalıdır (X-->;i:insert, u:update, d:delete). 			
Note: eğer bir stored Procedure sp veya xp ile başlarsa SQL server 
bunun System stored procedure'u olduğunu düşündüğü için ilk önce master veritabanında arayacaktır. 
  
  
\section{İsimlendirme Konvansiyonu}  
  
## İsimlendirme Konvansiyonu - Stored Procedure - Gömülü Yordamlar }  

Stored Procudure'lara isim verirken tablo ismi + yaptığı işlem şeklinde  isim verin.
    


- Tablo Ismi + yaptığı iş 
- usp_PersonelAraAdiVeSoyadiIle 
- usp_Personel_Oku_Tum 
- usp_MuhasebeYillikMizanHesapla

a
\end{itemize}

Not bu isimler örnek olsun diye verilmiştir. 
Veritabanında basit CRUD ve arama işlemleri için stored procedure olmamalıdır.

## İsimlendirme Konvansiyonu - Table and View-Tablo ve Görüntü}  


- INSAN_KAYNAKLARI.MUSTERI 
- TANIM_TABLOLARI.NUFUS_CUZDANI_VERILIS_NEDENI
\end{itemize}  



Tablo ve görüntülere (view) ayrı isimler vermiyoruz.		  

## İsimlendirme Konvansiyonu - Column-Kolon}  
Her kelimenin ilk harfi büyük yazılır. 

- MusteriKey 
- SonDegistirmeTarihi
- TipNo
- MusteriKey




## İsimlendirme Konvansiyonu - Index}  

IX_TabloIsmi_KolonIsimleri  veya UQ_TabloIsmi_KolonIsimleri şeklinde kullanılmalıdır.
Her kelimenin ilk harfi büyük yazılır.
Unique indexler UQ ile başlarken, diğer indexler IX ile başlamalıdır.



- 
- IX_Musteri_MusteriNo
- IX_Satislar_TipNo
- IX_Satislar_MusteriKey

o

\end{itemize}  






## İsimlendirme Konvansiyonu - Yabancı anahtar (Foreign key)}  

-  FK_TabloIsmi1KolonIsmi1FK_TabloIsmi2KolonIsmi2 
- FK_MusteriMusteriNoSiparisMusteriNo
\end{itemize}
Her kelimenin ilk harfi büyük yazılır. 


## İsimlendirme Konvansiyonu - Default - Varsayılan}  

- DF_
- DF_PERSONEL_IlkGirisTarihi 
\end{itemize}  
  

, İsimlendirme düzgün olur. 		  

## İsimlendirme Konvansiyonu - Constraint }  

- CK_
- CK_OKUL_BILGILERI_GirisSenesi  
\end{itemize}  
  

, İsimlendirme düzgün olur. 				 
  
## İsimlendirme Konvansiyonu - Trigger - Tetikleyici  }  
utrX + Tablo Ismi, yerine triggerin hangi işlem için olduğunu söyleyen bir kelime gelicektir. 


- utrX_ + tablo ismi + islem (insert (i), update (u), delete (d))
- utrX_ORTAK_KISI_Delete
\end{itemize}  



  
\section{Düzenleme Geçmişi} 

\begin{tabular}{@{}llll@{}}

\toprule

 Versiyon & Yazarlar & Tarih & Yapılan Değişiklikler  \\ 

\midrule

 0.1 &  Atilla Özgür & 2006 & İlk Yazım   \\ 
 0.2 &  Atilla Özgür & 2008 & Fatih ile İç İşlerinde yapılan değişiklik \\ 
 0.3 &  Atilla Özgür & 2013-02-13 & Çok uzun bir aradan sonra bazı düzeltmeler  \\ 
 0.4 &  Atilla Özgür & 2013-07-04 & Latex çevrimi, sectionlara ayırma , tümüyle tekrar yazıldı.  \\ 
 0.5 &  Atilla Özgür & 2017-12-12 & İŞKUR eğitimden önce değişiklikler. latex booktabs'a geçiş.   \\ 
\bottomrule
\end{tabular}


\end{document}
